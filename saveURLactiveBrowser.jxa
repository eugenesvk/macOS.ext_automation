#!/usr/bin/osascript -l JavaScript
(() => { // Self-executing function: can use in the Script Editor as well as with osascript to run automatically
// ————————————————————————————————————————————————————————
// Set directory to save urls to and extension (without .)
const directory         	= '~/Downloads'
const extension         	= 'url'
const path_max          	= 120 // cut off very long urls at this many unicode codepoints
const host_title_sep    	= ' ' // separator between www.host.com and Tab Title
const illegal_fs_symbols	= {   // replace illegal filesystem symbols (win/mac for compatibility)
  '/':'⧸',
  '\\':'⧵',
  '*':'∗',
  ':':'꞉',
  '"':'”',
  '|':'¦',
  '<':'‹',
  '>':'›',
  '?':'⸮',
  '^':'ˆ',
}
// ————————————————————————————————————————————————————————

/* Firefox doesn't support automation, hackaround possible, but not implemented here
link=$( osascript -e  'tell application "System Events" to tell process "Firefox" to get value of UI element 1 of combo box 1 of toolbar "Navigation" of first group of front window' )
echo "$link"
*/
ObjC.import("Foundation");

let fileDir	= directory
if (fileDir.startsWith('~/')) {
  const Home	= $.NSHomeDirectory().js
  fileDir = fileDir.replace('~', Home)
}

// delay(2) // for testing as a standalone script, 2sec before switching to a browser
// Get title and URL for the frontmost tab of the active browser, separated by a newline. For shorter code inclusive of all editions, only the start of the application name is checked. This method is superior to its AppleScript counterpart. It does not need a "main" browser available on the system to reuse the command on similar ones and throws a proper error code on failure (adapted from https://gist.github.com/vitorgalvao/5392178)
const frontAppName	= getFrontProcName()
const frontApp    	= Application(frontAppName)
const webkit      	= ["Safari","Webkit","Orion"]
const chromium    	= ["Google Chrome","Chromium","Opera","Vivaldi","Brave Browser","Microsoft Edge","Arc"]

let currentTabKey	= ''
if        (webkit.some(  appName => frontAppName.startsWith(appName))) { currentTabKey='currentTab'
} else if (chromium.some(appName => frontAppName.startsWith(appName))) { currentTabKey='activeTab'
} else { throw new Error(`${frontAppName} is not a supported browser: ${webkit.concat(chromium).join(", ")}`) }
if (currentTabKey) {
  const win            	= frontApp.windows[0]
  const tab            	= win[currentTabKey]
  const currentTabTitle	= tab.name()
  const currentTabURL  	= tab.url()
  const {host,path}    	= getURLpart(currentTabURL)
  if ((host) && (currentTabTitle)) {
    let fileHost	= host
    if (fileHost.startsWith('www.')) {
      fileHost = host.replace('www.','')
    }
    let fileStem	= `${fileHost}${host_title_sep}${currentTabTitle}`
    if ([...fileStem].length > path_max) {
      fileStem	= (Array.from(str).slice(0,path_max).join('')) }
    let fileStem_legal = fileStem.replace(/\/$/,'') // remove last path sep/
    for (const [illegal,replacement] of Object.entries(illegal_fs_symbols)) {
      if (fileStem.includes(illegal)) {fileStem_legal = fileStem_legal.replaceAll(illegal,replacement)}
    }
    fileStem       	= fileStem_legal
    const fileName 	= `${fileStem}.${extension}`
    const filePath 	= `${fileDir}/${fileName}`
    const fileStrJS	= `[InternetShortcut]\nURL=${currentTabURL}\n`
    const fileStr  	= $.NSString.alloc.initWithUTF8String(fileStrJS)
    // check if file exists, and if yes, add something to it?
    // const fm         	= $.NSFileManager.defaultManager
    // const nsfilePath 	= $.NSString.alloc.initWithUTF8String(filePath)
    // const isFileThere	= $.NSFileManager.defaultManager.fileExistsAtPath(nsfilePath)
    // if (isFileThere) {
      // filePath = `${fileDir}/${host}${urlextra}.${extension}`
    // } //console.log(`filePath=¦${filePath}¦`)
    fileStr.writeToFileAtomicallyEncodingError(filePath,true, $.NSUTF8StringEncoding, null)
  } else { throw new Error(`Couldn't parse ${currentTabURL}, aborting`) }

}   else { throw new Error(`${frontAppName} is not a supported browser: ${webkit.concat(chromium).join(", ")}`) }


// Helper functions
function getFrontProcName() { // Get the name of the current application.
  const sys       	= Application("System Events")
  const procs     	= sys.processes
  const proc_front	= procs.whose({frontmost:{'=':true}})[0] //.where({frontmost:true})[0].name()
  const proc_name 	= proc_front.name()

  return proc_name
}
function getURLpart(url) {
  const urlComponents = $.NSURLComponents.componentsWithString(url)
  const NSscheme	= urlComponents.scheme
  const NShost  	= urlComponents.host
  const NSpath  	= urlComponents.path
  const scheme  	= NSscheme.js
  const host    	= NShost.js
  const path    	= NSpath.js

  return {scheme:scheme,host:host,path:path,nsscheme:NSscheme,nshost:NShost,nspath:NSpath,}
}
})()
