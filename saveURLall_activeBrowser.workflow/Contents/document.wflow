<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>AMApplicationBuild</key>
	<string>521.1</string>
	<key>AMApplicationVersion</key>
	<string>2.10</string>
	<key>AMDocumentVersion</key>
	<string>2</string>
	<key>actions</key>
	<array>
		<dict>
			<key>action</key>
			<dict>
				<key>AMAccepts</key>
				<dict>
					<key>Container</key>
					<string>List</string>
					<key>Optional</key>
					<true/>
					<key>Types</key>
					<array>
						<string>com.apple.cocoa.path</string>
					</array>
				</dict>
				<key>AMActionVersion</key>
				<string>1.2.1</string>
				<key>AMApplication</key>
				<array>
					<string>Finder</string>
				</array>
				<key>AMParameterProperties</key>
				<dict>
					<key>defaultLocation</key>
					<dict>
						<key>isPathPopUp</key>
						<true/>
						<key>variableUUIDsInMenu</key>
						<array/>
					</dict>
					<key>granularity</key>
					<dict/>
					<key>multipleSelection</key>
					<dict/>
					<key>promptMessage</key>
					<dict>
						<key>tokenizedValue</key>
						<array>
							<string>Choose a Folder to save ðŸ”—urls to:</string>
						</array>
					</dict>
				</dict>
				<key>AMProvides</key>
				<dict>
					<key>Container</key>
					<string>List</string>
					<key>Types</key>
					<array>
						<string>com.apple.cocoa.path</string>
					</array>
				</dict>
				<key>ActionBundlePath</key>
				<string>/System/Library/Automator/Ask for Finder Items.action</string>
				<key>ActionName</key>
				<string>Ask for Finder Items</string>
				<key>ActionParameters</key>
				<dict>
					<key>defaultLocation</key>
					<string>~/Downloads</string>
					<key>granularity</key>
					<integer>1</integer>
					<key>multipleSelection</key>
					<false/>
					<key>promptMessage</key>
					<string>Choose a Folder to save ðŸ”—urls to:</string>
				</dict>
				<key>BundleIdentifier</key>
				<string>com.apple.Automator.AskForFinderItems</string>
				<key>CFBundleVersion</key>
				<string>1.2.1</string>
				<key>CanShowSelectedItemsWhenRun</key>
				<true/>
				<key>CanShowWhenRun</key>
				<false/>
				<key>Category</key>
				<array>
					<string>AMCategoryFilesAndFolders</string>
				</array>
				<key>Class Name</key>
				<string>AMAskForFinderItemsAction</string>
				<key>InputUUID</key>
				<string>8B5C54F7-3DA9-4491-B80E-801E3BE3E9C0</string>
				<key>Keywords</key>
				<array>
					<string>Find</string>
					<string>Item</string>
					<string>File</string>
					<string>Folder</string>
					<string>Ask</string>
					<string>Choose</string>
					<string>Prompt</string>
				</array>
				<key>OutputUUID</key>
				<string>A3996077-8807-4FC8-A2CE-25C10E45CBE1</string>
				<key>UUID</key>
				<string>E24468A8-9F1D-418E-BB17-F4518881D1E2</string>
				<key>UnlocalizedApplications</key>
				<array>
					<string>Finder</string>
				</array>
				<key>arguments</key>
				<dict>
					<key>0</key>
					<dict>
						<key>default value</key>
						<integer>0</integer>
						<key>name</key>
						<string>granularity</string>
						<key>required</key>
						<string>0</string>
						<key>type</key>
						<string>0</string>
						<key>uuid</key>
						<string>0</string>
					</dict>
					<key>1</key>
					<dict>
						<key>default value</key>
						<false/>
						<key>name</key>
						<string>multipleSelection</string>
						<key>required</key>
						<string>0</string>
						<key>type</key>
						<string>0</string>
						<key>uuid</key>
						<string>1</string>
					</dict>
					<key>2</key>
					<dict>
						<key>default value</key>
						<string>~/Desktop</string>
						<key>name</key>
						<string>defaultLocation</string>
						<key>required</key>
						<string>0</string>
						<key>type</key>
						<string>0</string>
						<key>uuid</key>
						<string>2</string>
					</dict>
					<key>3</key>
					<dict>
						<key>default value</key>
						<string>Choose a Finder Item:</string>
						<key>name</key>
						<string>promptMessage</string>
						<key>required</key>
						<string>0</string>
						<key>type</key>
						<string>0</string>
						<key>uuid</key>
						<string>3</string>
					</dict>
				</dict>
				<key>isViewVisible</key>
				<integer>0</integer>
				<key>location</key>
				<string>496.750000:164.000000</string>
				<key>nibPath</key>
				<string>/System/Library/Automator/Ask for Finder Items.action/Contents/Resources/Base.lproj/main.nib</string>
			</dict>
			<key>isViewVisible</key>
			<integer>0</integer>
		</dict>
		<dict>
			<key>action</key>
			<dict>
				<key>AMAccepts</key>
				<dict>
					<key>Container</key>
					<string>List</string>
					<key>Optional</key>
					<true/>
					<key>Types</key>
					<array>
						<string>com.apple.applescript.object</string>
					</array>
				</dict>
				<key>AMActionVersion</key>
				<string>1.0</string>
				<key>AMApplication</key>
				<array>
					<string>Automator</string>
				</array>
				<key>AMParameterProperties</key>
				<dict>
					<key>source</key>
					<dict/>
				</dict>
				<key>AMProvides</key>
				<dict>
					<key>Container</key>
					<string>List</string>
					<key>Types</key>
					<array>
						<string>com.apple.applescript.object</string>
					</array>
				</dict>
				<key>ActionBundlePath</key>
				<string>/System/Library/Automator/Run JavaScript.action</string>
				<key>ActionName</key>
				<string>Run JavaScript</string>
				<key>ActionParameters</key>
				<dict>
					<key>source</key>
					<string>function run(input, parameters) {(() =&gt; { // Self-executing function: can use in the Script Editor as well as with osascript to run automatically// â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”// Set directory to save urls to and extension (without .)//const directory           	= '~/Downloads'const directory        	= input[0] + '' // in Automatorconst extension           	= 'url'const prefixWinID         	= true // add a numeric prefix to the url name to indicate a windowconst path_max            	= 120 // cut off very long urls at this many unicode codepointsconst host_title_sep      	= ' ' // separator between www.host.com and Tab Titleconst user_replace_symbols	= {   // replace symbols in path (illegal win+mac filesystem symbols will be replaced from ~/Library/Script Libraries/str.scptdâ€™s illegal_fs_symbols constant)  // '/':'â§¸',}// â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”/* Firefox doesn't support automation, hackaround possible, but not implemented herelink=$( osascript -e  'tell application "System Events" to tell process "Firefox" to get value of UI element 1 of combo box 1 of toolbar "Navigation" of first group of front window' )echo "$link"*/ObjC.import("Foundation");const str	= Library("str")const sys	= Library("sys")const p  	= sys.p 	// helper console logconst pp 	= sys.pp	// helper print var names, must be passed as {objects}const pt 	= sys.pt	// helper print var's type and var's valueconst ps 	= sys.ps	// helper print objects via stringifyconst illegal_fs_symbols = {...str.get_illegal_fs_symbols(), ...user_replace_symbols};const strr = JSON.stringify(illegal_fs_symbols, null, 0)// ps(illegal_fs_symbols)// pp(strr)let fileDir	= directoryif (fileDir.startsWith('~/')) {  const Home	= $.NSHomeDirectory().js  fileDir = fileDir.replace('~', Home)}// delay(2) // for testing as a standalone script, 2sec before switching to a browser// Get titles/URLs of all the tabs of all the windows of the active browser. For shorter code inclusive of all editions, only the start of the application name is checked (adapted from https://gist.github.com/vitorgalvao/5392178)const frontAppName	= sys.getFrontProcName()const frontApp    	= Application(frontAppName)const webkit      	= ["Safari","Webkit","Orion"]const chromium    	= ["Google Chrome","Chromium","Opera","Vivaldi","Brave Browser","Microsoft Edge","Arc"]if ( !(  webkit.some(appName =&gt; frontAppName.startsWith(appName)))  &amp;&amp; !(chromium.some(appName =&gt; frontAppName.startsWith(appName)))) {  throw new Error(`${frontAppName} is not a supported browser: ${webkit.concat(chromium).join(", ")}`) }const wins    	= frontApp.windowsconst winCount	= wins.lengthObject.keys(wins).forEach(winID =&gt; {  const win 	= wins[winID]  const tabs	= win.tabs()  for (const [tabID,tab] of Object.entries(tabs)) {    const tabTitle   	= tab.name()    const tabURL     	= tab.url()    const {host,path}	= str.getURLpart(tabURL)    if ((tabTitle) &amp;&amp; (host)) {      let fileHost	= host      if (fileHost.startsWith(  'www.')) {        fileHost = host.replace('www.','')}      let fileStem	= (((prefixWinID) &amp;&amp; (winCount &gt; 1)) ? `${winID} ` : '') + `${fileHost}${host_title_sep}${tabTitle}`      if ([...fileStem].length &gt; path_max) {        fileStem	= (Array.from(fileStem).slice(0,path_max).join('')) }      let fileStem_legal = fileStem.replace(/\/$/,'') // remove last path sep/      for (const [illegal,replacement] of Object.entries(illegal_fs_symbols)) {        if (fileStem.includes(illegal)) {fileStem_legal = fileStem_legal.replaceAll(illegal,replacement)}}      fileStem       	= fileStem_legal      const fileName 	= `${fileStem}.${extension}`      const filePath 	= `${fileDir}/${fileName}`      const fileStrJS	= `[InternetShortcut]\nURL=${tabURL}\n`      const fileStr  	= $.NSString.alloc.initWithUTF8String(fileStrJS)      // check if file exists, and if yes, add something to it?      // const fm         	= $.NSFileManager.defaultManager      // const nsfilePath 	= $.NSString.alloc.initWithUTF8String(filePath)      // const isFileThere	= $.NSFileManager.defaultManager.fileExistsAtPath(nsfilePath)      // if (isFileThere) {        // filePath = `${fileDir}/${host}${urlextra}.${extension}`      // }      // console.log(`filePath=Â¦${filePath}Â¦`)      fileStr.writeToFileAtomicallyEncodingError(filePath,true, $.NSUTF8StringEncoding, null)    } else { console.log(`Couldn't parse â€˜${tabURL}â€™, skipping`) }  }})})()	return input;}</string>
				</dict>
				<key>BundleIdentifier</key>
				<string>com.apple.Automator.RunJavaScript</string>
				<key>CFBundleVersion</key>
				<string>1.0</string>
				<key>CanShowSelectedItemsWhenRun</key>
				<false/>
				<key>CanShowWhenRun</key>
				<true/>
				<key>Category</key>
				<array>
					<string>AMCategoryUtilities</string>
				</array>
				<key>Class Name</key>
				<string>RunJavaScriptAction</string>
				<key>Disabled</key>
				<false/>
				<key>InputUUID</key>
				<string>7C185A61-AAA0-4963-97DF-EB071A859EE4</string>
				<key>Keywords</key>
				<array>
					<string>Run</string>
					<string>JavaScript</string>
				</array>
				<key>OutputUUID</key>
				<string>83AAFA10-8F6E-4489-8F29-361D163ED75F</string>
				<key>UUID</key>
				<string>D4A0CC9F-0A3B-427D-8673-167F24E9969E</string>
				<key>UnlocalizedApplications</key>
				<array>
					<string>Automator</string>
				</array>
				<key>arguments</key>
				<dict>
					<key>0</key>
					<dict>
						<key>default value</key>
						<string>function run(input, parameters) {
	
	// Your script goes here

	return input;
}</string>
						<key>name</key>
						<string>source</string>
						<key>required</key>
						<string>0</string>
						<key>type</key>
						<string>0</string>
						<key>uuid</key>
						<string>0</string>
					</dict>
				</dict>
				<key>isViewVisible</key>
				<integer>1</integer>
				<key>location</key>
				<string>496.750000:409.000000</string>
				<key>nibPath</key>
				<string>/System/Library/Automator/Run JavaScript.action/Contents/Resources/Base.lproj/main.nib</string>
			</dict>
			<key>isViewVisible</key>
			<integer>1</integer>
		</dict>
	</array>
	<key>connectors</key>
	<dict>
		<key>8EDE15FE-7E25-46FF-9907-BE995BF5AC01</key>
		<dict>
			<key>from</key>
			<string>E24468A8-9F1D-418E-BB17-F4518881D1E2 - E24468A8-9F1D-418E-BB17-F4518881D1E2</string>
			<key>to</key>
			<string>D4A0CC9F-0A3B-427D-8673-167F24E9969E - D4A0CC9F-0A3B-427D-8673-167F24E9969E</string>
		</dict>
	</dict>
	<key>workflowMetaData</key>
	<dict>
		<key>applicationBundleID</key>
		<string>com.apple.Safari</string>
		<key>applicationBundleIDsByPath</key>
		<dict>
			<key>/Applications/3 Connect/1 Browse/Vivaldi.app</key>
			<string>com.vivaldi.Vivaldi</string>
			<key>/System/Volumes/Preboot/Cryptexes/App/System/Applications/Safari.app</key>
			<string>com.apple.Safari</string>
		</dict>
		<key>applicationPath</key>
		<string>/System/Volumes/Preboot/Cryptexes/App/System/Applications/Safari.app</string>
		<key>applicationPaths</key>
		<array>
			<string>/System/Volumes/Preboot/Cryptexes/App/System/Applications/Safari.app</string>
			<string>/Applications/3 Connect/1 Browse/Vivaldi.app</string>
		</array>
		<key>inputTypeIdentifier</key>
		<string>com.apple.Automator.nothing</string>
		<key>outputTypeIdentifier</key>
		<string>com.apple.Automator.nothing</string>
		<key>presentationMode</key>
		<integer>11</integer>
		<key>processesInput</key>
		<integer>0</integer>
		<key>serviceApplicationBundleID</key>
		<string>com.apple.Safari</string>
		<key>serviceApplicationPath</key>
		<string>/System/Volumes/Preboot/Cryptexes/App/System/Applications/Safari.app</string>
		<key>serviceInputTypeIdentifier</key>
		<string>com.apple.Automator.nothing</string>
		<key>serviceOutputTypeIdentifier</key>
		<string>com.apple.Automator.nothing</string>
		<key>serviceProcessesInput</key>
		<integer>0</integer>
		<key>systemImageName</key>
		<string>NSTouchBarTransferDownload</string>
		<key>useAutomaticInputType</key>
		<integer>0</integer>
		<key>workflowTypeIdentifier</key>
		<string>com.apple.Automator.servicesMenu</string>
	</dict>
</dict>
</plist>
