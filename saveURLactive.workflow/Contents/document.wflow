<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>AMApplicationBuild</key>
	<string>521.1</string>
	<key>AMApplicationVersion</key>
	<string>2.10</string>
	<key>AMDocumentVersion</key>
	<string>2</string>
	<key>actions</key>
	<array>
		<dict>
			<key>action</key>
			<dict>
				<key>AMAccepts</key>
				<dict>
					<key>Container</key>
					<string>List</string>
					<key>Optional</key>
					<true/>
					<key>Types</key>
					<array>
						<string>com.apple.applescript.object</string>
					</array>
				</dict>
				<key>AMActionVersion</key>
				<string>1.0</string>
				<key>AMApplication</key>
				<array>
					<string>Automator</string>
				</array>
				<key>AMParameterProperties</key>
				<dict>
					<key>source</key>
					<dict/>
				</dict>
				<key>AMProvides</key>
				<dict>
					<key>Container</key>
					<string>List</string>
					<key>Types</key>
					<array>
						<string>com.apple.applescript.object</string>
					</array>
				</dict>
				<key>ActionBundlePath</key>
				<string>/System/Library/Automator/Run JavaScript.action</string>
				<key>ActionName</key>
				<string>Run JavaScript</string>
				<key>ActionParameters</key>
				<dict>
					<key>source</key>
					<string>function run(input, parameters) {(() =&gt; { // Self-executing function: can use in the Script Editor as well as with osascript to run automatically
// ————————————————————————————————————————————————————————
// Set directory to save urls to and extension (without .)
const directory         	= '~/Downloads'
const extension         	= 'url'
const path_max          	= 120 // cut off very long urls at this many unicode codepoints
const host_title_sep    	= ' ' // separator between www.host.com and Tab Title
const illegal_fs_symbols	= {   // replace illegal filesystem symbols (win/mac for compatibility)
  '/':'⧸',
  '\\':'⧵',
  '*':'∗',
  ':':'꞉',
  '"':'”',
  '|':'¦',
  '&lt;':'‹',
  '&gt;':'›',
  '?':'⸮',
  '^':'ˆ',
}
// ————————————————————————————————————————————————————————

/* Firefox doesn't support automation, hackaround possible, but not implemented here
link=$( osascript -e  'tell application "System Events" to tell process "Firefox" to get value of UI element 1 of combo box 1 of toolbar "Navigation" of first group of front window' )
echo "$link"
*/
ObjC.import("Foundation");

let fileDir	= directory
if (fileDir.startsWith('~/')) {
  const Home	= $.NSHomeDirectory().js
  fileDir = fileDir.replace('~', Home)
}

// delay(2) // for testing as a standalone script, 2sec before switching to a browser
// Get title and URL for the frontmost tab of the active browser, separated by a newline. For shorter code inclusive of all editions, only the start of the application name is checked. This method is superior to its AppleScript counterpart. It does not need a "main" browser available on the system to reuse the command on similar ones and throws a proper error code on failure (adapted from https://gist.github.com/vitorgalvao/5392178)
const frontAppName	= getFrontProcName()
const frontApp    	= Application(frontAppName)
const webkit      	= ["Safari","Webkit","Orion"]
const chromium    	= ["Google Chrome","Chromium","Opera","Vivaldi","Brave Browser","Microsoft Edge","Arc"]

let currentTabKey	= ''
if        (webkit.some(  appName =&gt; frontAppName.startsWith(appName))) { currentTabKey='currentTab'
} else if (chromium.some(appName =&gt; frontAppName.startsWith(appName))) { currentTabKey='activeTab'
} else { throw new Error(`${frontAppName} is not a supported browser: ${webkit.concat(chromium).join(", ")}`) }
if (currentTabKey) {
  const win            	= frontApp.windows[0]
  const tab            	= win[currentTabKey]
  const currentTabTitle	= tab.name()
  const currentTabURL  	= tab.url()
  const {host,path}    	= getURLpart(currentTabURL)
  if ((host) &amp;&amp; (currentTabTitle)) {
    let fileHost	= host
    if (fileHost.startsWith('www.')) {
      fileHost = host.replace('www.','')
    }
    let fileStem	= `${fileHost}${host_title_sep}${currentTabTitle}`
    if ([...fileStem].length &gt; path_max) {
      fileStem	= (Array.from(fileStem).slice(0,path_max).join('')) }
    let fileStem_legal = fileStem.replace(/\/$/,'') // remove last path sep/
    for (const [illegal,replacement] of Object.entries(illegal_fs_symbols)) {
      if (fileStem.includes(illegal)) {fileStem_legal = fileStem_legal.replaceAll(illegal,replacement)}
    }
    fileStem       	= fileStem_legal
    const fileName 	= `${fileStem}.${extension}`
    const filePath 	= `${fileDir}/${fileName}`
    const fileStrJS	= `[InternetShortcut]\nURL=${currentTabURL}\n`
    const fileStr  	= $.NSString.alloc.initWithUTF8String(fileStrJS)
    // check if file exists, and if yes, add something to it?
    // const fm         	= $.NSFileManager.defaultManager
    // const nsfilePath 	= $.NSString.alloc.initWithUTF8String(filePath)
    // const isFileThere	= $.NSFileManager.defaultManager.fileExistsAtPath(nsfilePath)
    // if (isFileThere) {
      // filePath = `${fileDir}/${host}${urlextra}.${extension}`
    // } //console.log(`filePath=¦${filePath}¦`)
    fileStr.writeToFileAtomicallyEncodingError(filePath,true, $.NSUTF8StringEncoding, null)
  } else { throw new Error(`Couldn't parse ${currentTabURL}, aborting`) }

}   else { throw new Error(`${frontAppName} is not a supported browser: ${webkit.concat(chromium).join(", ")}`) }


// Helper functions
function getFrontProcName() { // Get the name of the current application.
  const sys       	= Application("System Events")
  const procs     	= sys.processes
  const proc_front	= procs.whose({frontmost:{'=':true}})[0] //.where({frontmost:true})[0].name()
  const proc_name 	= proc_front.name()

  return proc_name
}
function getURLpart(url) {
  const urlComponents = $.NSURLComponents.componentsWithString(url)
  const NSscheme	= urlComponents.scheme
  const NShost  	= urlComponents.host
  const NSpath  	= urlComponents.path
  const scheme  	= NSscheme.js
  const host    	= NShost.js
  const path    	= NSpath.js

  return {scheme:scheme,host:host,path:path,nsscheme:NSscheme,nshost:NShost,nspath:NSpath,}
}
})()
	return input;}</string>
				</dict>
				<key>BundleIdentifier</key>
				<string>com.apple.Automator.RunJavaScript</string>
				<key>CFBundleVersion</key>
				<string>1.0</string>
				<key>CanShowSelectedItemsWhenRun</key>
				<false/>
				<key>CanShowWhenRun</key>
				<true/>
				<key>Category</key>
				<array>
					<string>AMCategoryUtilities</string>
				</array>
				<key>Class Name</key>
				<string>RunJavaScriptAction</string>
				<key>InputUUID</key>
				<string>7C185A61-AAA0-4963-97DF-EB071A859EE4</string>
				<key>Keywords</key>
				<array>
					<string>Run</string>
					<string>JavaScript</string>
				</array>
				<key>OutputUUID</key>
				<string>83AAFA10-8F6E-4489-8F29-361D163ED75F</string>
				<key>UUID</key>
				<string>D4A0CC9F-0A3B-427D-8673-167F24E9969E</string>
				<key>UnlocalizedApplications</key>
				<array>
					<string>Automator</string>
				</array>
				<key>arguments</key>
				<dict>
					<key>0</key>
					<dict>
						<key>default value</key>
						<string>function run(input, parameters) {
	
	// Your script goes here

	return input;
}</string>
						<key>name</key>
						<string>source</string>
						<key>required</key>
						<string>0</string>
						<key>type</key>
						<string>0</string>
						<key>uuid</key>
						<string>0</string>
					</dict>
				</dict>
				<key>isViewVisible</key>
				<integer>1</integer>
				<key>location</key>
				<string>496.750000:368.000000</string>
				<key>nibPath</key>
				<string>/System/Library/Automator/Run JavaScript.action/Contents/Resources/Base.lproj/main.nib</string>
			</dict>
			<key>isViewVisible</key>
			<integer>1</integer>
		</dict>
	</array>
	<key>connectors</key>
	<dict/>
	<key>workflowMetaData</key>
	<dict>
		<key>applicationBundleID</key>
		<string>com.apple.Safari</string>
		<key>applicationBundleIDsByPath</key>
		<dict>
			<key>/Applications/3 Connect/1 Browse/Vivaldi.app</key>
			<string>com.vivaldi.Vivaldi</string>
			<key>/System/Volumes/Preboot/Cryptexes/App/System/Applications/Safari.app</key>
			<string>com.apple.Safari</string>
		</dict>
		<key>applicationPath</key>
		<string>/System/Volumes/Preboot/Cryptexes/App/System/Applications/Safari.app</string>
		<key>applicationPaths</key>
		<array>
			<string>/System/Volumes/Preboot/Cryptexes/App/System/Applications/Safari.app</string>
			<string>/Applications/3 Connect/1 Browse/Vivaldi.app</string>
		</array>
		<key>inputTypeIdentifier</key>
		<string>com.apple.Automator.nothing</string>
		<key>outputTypeIdentifier</key>
		<string>com.apple.Automator.nothing</string>
		<key>presentationMode</key>
		<integer>11</integer>
		<key>processesInput</key>
		<integer>0</integer>
		<key>serviceApplicationBundleID</key>
		<string>com.apple.Safari</string>
		<key>serviceApplicationPath</key>
		<string>/System/Volumes/Preboot/Cryptexes/App/System/Applications/Safari.app</string>
		<key>serviceInputTypeIdentifier</key>
		<string>com.apple.Automator.nothing</string>
		<key>serviceOutputTypeIdentifier</key>
		<string>com.apple.Automator.nothing</string>
		<key>serviceProcessesInput</key>
		<integer>0</integer>
		<key>systemImageName</key>
		<string>NSActionTemplate</string>
		<key>useAutomaticInputType</key>
		<integer>1</integer>
		<key>workflowTypeIdentifier</key>
		<string>com.apple.Automator.servicesMenu</string>
	</dict>
</dict>
</plist>
